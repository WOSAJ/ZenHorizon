buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = '1.0_ALPHA'
group = 'com.wosaj.zenhorizon'
archivesBaseName = 'zenhorizon'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: '20210309-1.16.5'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                zenhorizon {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                zenhorizon {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'zenhorizon', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                zenhrizon {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url 'https://maven.blamejared.com' }
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = 'https://cursemaven.com' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.20'
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.5-4.0.8.1")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:1.16.5-4.0.8.1:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-50")
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-50:api")
    runtimeOnly fg.deobf("curse.maven:jei-238222:3681294")
    compileOnly fg.deobf("curse.maven:jei-238222:3681294")
    annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'
}

jar {
    manifest {
        attributes([
            "Specification-Title": "zenhorizon",
            "Specification-Vendor": "zenhorizon",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"zenhorizon",
            "MixinConfigs": "zenhorizon.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

mixin {
    add sourceSets.main, "ars_nouveau.refmap.json"
}

// Copied from Botania
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
